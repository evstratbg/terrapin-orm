[tool.poetry]
name = "terrapin-orm"
version = "0.0.2"
description = "Asynchronous orm for Postgresql"
repository = "https://github.com/evstratbg/terrapin-orm.git"
homepage = "https://github.com/evstratbg/terrapin-orm.git"
authors = ["Bogdan <evstrat.bg@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "terrapin_orm"}]

[tool.poetry.dependencies]
python = "^3.10"
asyncpg = "^0.28.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.0.291"
black = "^23.9.1"
diff-cover = "^7.7.0"
pytest-asyncio = "^0.21.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
data_file = "coverage/coverage"
omit = [".venv/*"]
branch = true  # Enable branch coverage which is stricter than basic coverage

[tool.coverage.report]
fail_under = 100
skip_covered = true
skip_empty = true
omit = [".venv/*"]
exclude_lines = [
    "pragma: no cover",
    "assert_never\\(",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if False:",
    "if 0:",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    # Impossible to cover
    # It is impossible to cover "if TYPE_CHECKING" statements because they never actually run
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing\\.)?overload",
    "__rich_repr__",
    "__repr__",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
log_level = "INFO"

[tool.pyright]
fail_under = 0
reportMissingImports = true
reportUnusedImport = true
ignore = [".venv", "migrations"]

[tool.diff_cover]
fail_under = 100
compare_branch = "origin/master"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.ruff]
line-length = 120
select = [
    "F",        # pyflakes
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT003",   # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "T10",      # flake8-debugger
    "ISC",      # flake8-implicit-str-concat
    "G010",     # Logging statement uses warn instead of warning
    "G201",     # Logging .exception(...) should be used instead of .error(..., exc_info=True)
    "G202",     # Logging statement has redundant exc_info
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "ERA",      # flake8-eradicate
    "PGH",      # pygrep-hooks
    "PLC0414",  # Import alias does not rename original package
    "PLE",      # Error
    "PLW",      # Warning
    "TRY",      # tryceratops
    "FLY",      # flynt
    "RUF",      # ruff-specific rules
    "ANN001",   # missing type annotation for arguments
    "ANN002",   # missing type annotation for *args
    "ANN003",   # missing type annotation for **kwargs
]
unfixable = [
    "ERA001",   # eradicate: found commented out code (can be dangerous if fixed automatically)
]
ignore = [
    "A002",   # builtin shadowing in arguments
    "A003",   # builtin shadowing in attributes
    "D203",   # 1 blank line required before class docstring
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...`
    "ARG002", # Unused method argument
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving statement into the else clause
    "ARG001", # Unused first argument
    "PT019",  # Fixture without value is injected as parameter, use @pytest.mark.usefixtures instead
    "SIM108"  # Use ternary operator instead of if-else block (ternaries lie to coverage)
]
extend-exclude = ["migrations"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S",        # ignore bandit security issues in tests
    "B018",     # ignore useless expressions in tests
    "PT012",    # ignore complex with pytest.raises clauses
]